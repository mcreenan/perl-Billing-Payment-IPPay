=head1 NAME

Billing::Payment::IPPay - IPPay Payment Provider

=head1 SYNOPSIS

    use Billing::Payment::IPPay;

    # Create instance in test mode (uses ippay's test gateway)
    my $ippay = Billing::Payment::IPPay->new(
        test        => 1,
        terminal_id => 'TESTTERMINAL',
    );

    # Enable debugging with a custom debug handler
    my $ippay = Billing::Payment::IPPay->new(
        test        => 1,
        terminal_id => 'TESTTERMINAL',
        debug       =>
        debug_fn    => sub {
            my ($level, $message) = @_;
            printf "[%s] %s\n", $level, $message;
        },
    );

=head1 DESCRIPTION

TODO

=head1 METHODS

=head2 Constructor

=head3 Billing::Payment::IPPay->new( ... )

This class method accepts the following class parameters:

=over 4

=item terminal_id

TerminalID value supplied by IPPay for your Merchant Account.

=item test

Use IPPay's test gateway.

=item debug

Enable debug information to be output or captured.

See L<debug_fn>

=item debug_fn

A function that accepts 2 parameters: level, message.

If you pass this, any debug message is sent to this function instead of printed
to STDOUT.

=back

=head2 Helper Methods

All helper methods return a hash with the following structure:

    {
        success    => 0|1,
        http_code  => ...,    # HTTP Response Code from IPPay
        error_code => ...,    # Only set if success = 0. Same as "ActionCode" value
                              #   in IPPay XML Response
        error      => ...,    # Friendly error message if success = 0, usually
                              #   comes directly from IPPay
        body       => ...,    # Raw HTTP request body (XML)
        data       => { ... } # XML-parsed list of data returned by IPPay
                              #   Example keys:
                              #   ActionCode
                              #   ResultText
                              #   ErrMsg
    }

=head3 authonly

Submits an authorization only (AUTHONLY) transaction.

=head4 Required Fields

=over 4

=item CardNum

16 digit credit card number.

=item CardExpMonth

2 digit expiration month.

=item CardExpYear

2 digit expiration year.

=item TotalAmount

Total amount to authorize, as a decimal value (e.g. 12.99).

=back

=head4 Usage

    my $response = $ippay->authonly(
        {
            CardNum      => '4000300020001000',
            CardExpMonth => '11',
            CardExpYear  => '14',
            TotalAmount  => 49.00,
        }
    );

    $response->{success}
      ? printf "OK (Transaction ID: %s)", $response->{data}->{TransactionID}
      : printf "FAILED (%s)", $response->{error};

=head3 capture

Submits a capture (CAPT) transaction, which captures a previous authorization 
request.

=head4 Required Fields

=over 4

=item TransactionID

Transaction ID from previous authonly transaction.

=back

=head4 Usage

    my $response = $ippay->capture(
        {
            TransactionID => '<Transaction ID>',
        }
    );

    $response->{success}
      ? printf "OK"
      : printf "FAILED (%s)", $response->{error};

=head3 credit

Issue a credit to refund a previous transaction.

=head4 Required Fields

=over 4

=item TransactionID

Transaction ID from previous capture or sale transaction.

=back

=head4 Usage

    my $response = $ippay->credit(
        {
            TransactionID => '<Transaction ID>',
        }
    );

    $response->{success}
      ? printf "OK"
      : printf "FAILED (%s)", $response->{error};

=head3 check

Charge a checking or savings account.

=head4 Required Fields

=over 4

=item CardName

Name for the account.

=item TotalAmount

Total amount to be charged, as a decimal dollar value (e.g. 14.95).

=item FeeAmount

Fee to charge for use of checking or savings account.

B<Note>: This charge is B<on top of> the TotalAmount value. If you specify 14.95
for TotalAmount and 1.00 for FeeAmount, the account is charged 15.95 in total.

=item ACH

Hash containing information about the checking or savings account.

=over 8

=item Type (required)

CHECKING or SAVINGS

=item AccountNumber (required)

Account number for the checking or savings account to be charged.

=item ABA (required)

Routing number associated with the checking or savings account to be charged.

Defaults to 0.

=item Tokenize

Whether or not to create and return a token associated with the checking or
savings account. If enabled, a I<TokenID> field will be returned in the
response.

=item SEC

Type of security to use

=item CheckNumber

Number on a check if checking account.

=back

=back

=head4 Usage

    my $response = $ippay->check(
        {
            CardName    => 'Test Card',
            TotalAmount => 49.00,
            FeeAmount   => 1.00,
            ACH         => {
                Type          => 'SAVINGS',
                Tokenize      => 'true',
                SEC           => 'PPD',
                AccountNumber => '11111999',
                ABA           => '071025661',
                CheckNumber   => '15',
            },
            'IndustryInfo' => {
                'Type' => 'ECOMMERCE',
            },
        }
    );

    $response->{success}
      ? printf "OK"
      : printf "FAILED (%s)", $response->{error};

=head3 enq

Request information about a previous transaction.

=head4 Required Fields

=over 4

=item TransactionID

transaction id from previous capture or sale transaction.

=back

=head4 Usage

    use Data::Dumper;

    my $response = $ippay->enq(
        {
            TransactionID => '<transaction id>',
        }
    );

    $response->{success}
      ? printf "Ok", dumper($response->{data})
      : printf "Failed (%s)", $response->{error};

=head3 ping

Transaction simply to verify the IPPay service is responsive

=head4 Usage

    my $response = $ippay->ping;
    $response->{success}
      ? printf "Ok", $response->{data}->{ResponseText}
      : printf "Failed (%s)", $response->{error};

=head3 reversal

Reverses a previous CHECK transaction

=head4 Required Fields

=over 4

=item TransactionID

Transaction id from previous capture or sale transaction.

=back

=head4 Usage

    my $response = $ippay->reversal(
        {
            TransactionID => '<transaction id>',
        }
    );

    $response->{success}
      ? printf "Ok"
      : printf "Failed (%s)", $response->{error};

=head3 sale

Equivalent to submitted an authorization (AUTHONLY) and capture (CAPT) 
transaction.

=head4 Required Fields

=over 4

=item CardNum

16 digit credit card number.

=item CardExpMonth

2 digit expiration month.

=item CardExpYear

2 digit expiration year.

=item TotalAmount

Total amount to authorize, as a decimal value (e.g. 12.99).

=back

=head4 Usage

    my $response = $ippay->sale(
        {
            CardNum      => '4000300020001000',
            CardExpMonth => '11',
            CardExpYear  => '14',
            TotalAmount  => 49.00,
        }
    );

    $response->{success}
      ? printf "OK (Transaction ID: %s)", $response->{data}->{TransactionID}
      : printf "FAILED (%s)", $response->{error};

=head3 tokenize

Create a unique Token idenfier that can be used in later transactions in place
of a credit card number or checking/savings account

=head4 Required Fields

=over 4

=item CardNum

16 digit credit card number.

=item CardExpMonth

2 digit expiration month.

=item CardExpYear

2 digit expiration year.

=back

=head4 Usage

    my $response = $ippay->tokenize(
        {
            CardNum      => '4000300020001000',
            CardExpMonth => '11',
            CardExpYear  => '14',
        }
    );

    $response->{success}
      ? printf "OK (Token ID: %s)", $response->{data}->{TokenID}
      : printf "FAILED (%s)", $response->{error};

=head3 void

Voids a credit card transaction before it has been settled (e.g. Card has been 
authorized but not captured yet)

=head4 Required Fields

=over 4

=item TransactionID

Transaction id from previous capture or sale transaction.

=item TotalAmount

The amount authorized in the transaction being voided

=back

=head4 Usage

    my $response = $ippay->void(
        {
            TransactionID => '<transaction id>',
            TotalAmount   => 14.95,
        }
    );

    $response->{success}
      ? printf "Ok"
      : printf "Failed (%s)", $response->{error};

=head3 voidach

Voids a previous check transaction before it has been settled

This transactions requires and accepts all the same fields as the previous
check transaction.

=head4 Usage

    my $response = $ippay->voidach(
        {
            CardName    => 'Test Card',
            TotalAmount => 49.00,
            FeeAmount   => 1.00,
            ACH         => {
                Type          => 'SAVINGS',
                Tokenize      => 'true',
                SEC           => 'PPD',
                AccountNumber => '11111999',
                ABA           => '071025661',
                CheckNumber   => '15',
            },
            'IndustryInfo' => {
                'Type' => 'ECOMMERCE',
            },
        }
    );

    $response->{success}
      ? printf "Ok"
      : printf "Failed (%s)", $response->{error};




=head2 Other Methods

=head3 submit_transaction

Submit a raw transaction to the IPPay API. It is B<recommended> that you use the
various helper methods instead.

=head1 NOTE

=head2 Unimplemented Transactions

=over 4

=item ACK

=item FORCE

=item REVERSEAUTH

=back

=head1 COMPATIBILITY

Compatible with IPPay's XML Product Specification v1.1.6 (Apr 30 2012)

=head1 COPYRIGHT

Copyright 2013 Matt Creenan

This package is free software. You may redistribute it or modify it under
Vthe same terms as Perl itself.

=head1 AUTHORS

Matt Creenan <mattcreenan@gmail.com>

=head1 SEE ALSO

=over 4

=item L<http://www.ippay.com/downloads/IPPay_Reference_Manual.pdf>

=item IPPay XML Product Specification v1.1.6 (no link available)

=item IPPay XML Feature Description for ACH Processing v1.3 (no link available)

=item IPPay Test System and Back-end Simulators v1.3 (no link available)

=back


=cut

